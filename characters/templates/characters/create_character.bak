{% extends "larp_manager/base.html" %}
{% load crispy_forms_tags %}

{% block title %}Create a New Character{% endblock %}

{% block content %}
<h1>Create a New Character</h1>

<form method="POST" class="needs-validation">
    {% csrf_token %}

    <!-- Starting Event Dropdown -->
    <div class="row mb-3">
        <div class="col-md-12">
            <label for="id_starting_event" class="form-label fw-bold">Starting Event</label>
            {{ form.starting_event }}
        </div>
    </div>

    <div class="form-group d-flex align-items-start mb-3">
        <!-- Character Name -->
        <div class="me-3" style="flex: 1; display: flex; align-items: center;">
            <label for="id_name" class="form-label fw-bold" style="min-width: 150px;">Character Name</label>
            {{ form.name }}
        </div>

        <div class="me-3" style="flex: 1; display: flex; align-items: center;">
            <label for="id_race" class="form-label fw-bold">Race</label>
            {{ form.race }}
        </div>
        <div class="me-3" style="flex: 1; display: flex; align-items: center;">
            <label class="fw-bold">Build Total:</label>
            <span id="starting_build" class="ms-2">0</span>
        </div>

        <!-- Slotted Affinity -->
        <div style="flex: 1; display: flex; align-items: center;">
            <label class="fw-bold">Slotted Affinity:</label>
            <span id="slotted_affinity" class="ms-2">0</span> <!-- Dynamic slotted affinity -->
        </div>
    </div>

    <div class="form-group d-flex align-items-start mb-3">
        <div class="me-3" style="flex: 1; display: flex; align-items: center;">
            <label for="player" class="form-label fw-bold" style="min-width: 150px;">Player</label>
            <span id="player" class="ms-2">{{ username }}</span>
          </div>
          <div class="me-3" style="flex: 1; display: flex; align-items: center;">
            <label class="fw-bold">Cultivator Tier:</label>
            <span id="cultivator_tier" class="ms-2"></span>
        </div>
        <!-- Unspent Build -->
        <div class="me-3" style="flex: 1; display: flex; align-items: center;">
            <label class="form-label fw-bold" style="min-width: 150px;">Unspent Build</label>
            <span id="unspent_build" class="ms-2">0</span> 
        </div>
    </div>


    <!-- Affinities Section -->
    <h4 class="mt-4">Select Affinities</h4>
    <div class="container-xl mt-4">
        <div class="row">
            {% for affinity in affinities %}
                <div class="col-md-2 mb-3">
                    <label for="affinity_{{ affinity.id }}" class="form-label fw-bold">{{ affinity.name }}</label>
                    <input
                        type="number"
                        id="affinity_{{ affinity.id }}"
                        name="affinity_{{ affinity.id }}"
                        value="0"
                        min="0"
                        max="6"
                        class="form-control"
                    >
                </div>
                {% if forloop.counter|divisibleby:6 and not forloop.last %}
                    </div><div class="row"> <!-- Close current row and start a new one after 6 items -->
                {% endif %}
            {% endfor %}
        </div>
    </div>

   <!-- Buttons to Add Skills -->
    <h2 class="mt-4">Add Skills</h2>
    <div class="d-flex justify-content-start mb-4">
        <button type="button" class="btn btn-secondary me-3" data-bs-toggle="modal" data-bs-target="#addCommonSkillModal">
            Add Common Skill
        </button>
        <button type="button" class="btn btn-secondary me-3" data-bs-toggle="modal" data-bs-target="#addRaceSkillModal">
            Add Race Skill
        </button>
        <button type="button" class="btn btn-secondary" data-bs-toggle="modal" data-bs-target="#addAffinitySkillModal">
            Add Affinity Skill
        </button>
    </div>

    <!-- Passive & At Will Skills -->
    <h2 class="mt-4">Passive & At Will Skills</h2>
    <div class="border rounded p-3 mb-4" style="min-height: 100px;">
        <p id="passive_skills_placeholder">No Passive or At Will Skills added yet.</p>
    </div>

    <!-- Per Encounter, Per Bell, Per Day, Per Weekend -->
    <h2 class="mt-4">Skill Frequencies</h2>
    <div class="row">
        <div class="col-md-3">
            <h4>Per Encounter</h4>
            <div class="border rounded p-3" style="min-height: 100px;">
                <p id="per_encounter_placeholder">No skills added.</p>
            </div>
        </div>
        <div class="col-md-3">
            <h4>Per Bell</h4>
            <div class="border rounded p-3" style="min-height: 100px;">
                <p id="per_bell_placeholder">No skills added.</p>
            </div>
        </div>
        <div class="col-md-3">
            <h4>Per Day</h4>
            <div class="border rounded p-3" style="min-height: 100px;">
                <p id="per_day_placeholder">No skills added.</p>
            </div>
        </div>
        <div class="col-md-3">
            <h4>Per Weekend</h4>
            <div class="border rounded p-3" style="min-height: 100px;">
                <p id="per_weekend_placeholder">No skills added.</p>
            </div>
        </div>
    </div>

    <button type="submit" class="btn btn-primary mt-3">Create Character</button>
</form>


<!-- Modals for Adding Skills -->
<!-- Add Common Skill Modal -->
<div class="modal fade" id="addCommonSkillModal" tabindex="-1" aria-labelledby="addCommonSkillModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg"> 
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addCommonSkillModalLabel">Add Common Skill</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="common-skills-list">
                    <!-- Skills will be loaded dynamically here -->
                    <p>Loading common skills...</p>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


<!-- Add Race Skill Modal -->
<div class="modal fade" id="addRaceSkillModal" tabindex="-1" aria-labelledby="addRaceSkillModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addRaceSkillModalLabel">Add Race Skill</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="race-skills-list">
                    <p>No race selected. Please select a race to see available skills.</p>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Add Affinity Skill Modal -->
<div class="modal fade" id="addAffinitySkillModal" tabindex="-1" aria-labelledby="addAffinitySkillModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addAffinitySkillModalLabel">Add Affinity Skill</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Add logic to display affinity skills here -->
                <p>Select a skill from the available affinity skills.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary">Add Skill</button>
            </div>
        </div>
    </div>
</div>


<!-- JavaScript to handle dynamic updates -->
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const eventDropdown = document.querySelector('select[name="starting_event"]'); // The event dropdown
        const startingBuildElement = document.querySelector('#starting_build'); // The Starting Build display
        const unspentBuildElement = document.querySelector('#unspent_build'); // The Unspent Build display
        const cultivatorTierElement = document.querySelector('#cultivator_tier'); // Cultivator Tier display field
        const affinityInputs = document.querySelectorAll('.affinity-input'); // Affinity input fields
        const commonSkillsList = document.querySelector('#common-skills-list');
        const raceDropdown = document.querySelector('select[name="race"]'); // Race dropdown
        const raceSkillsList = document.querySelector('#race-skills-list'); // Race skills placeholder
        const raceSkillModal = document.querySelector('#addRaceSkillModal'); // Race Skill Modal

        let startingBuild = 0;

        // Update Unspent Build dynamically
        function updateUnspentBuild() {
            let totalSpentBuild = 0;

            affinityInputs.forEach(input => {
                totalSpentBuild += parseInt(input.value || 0, 10);
            });

            const unspentBuild = Math.max(0, startingBuild - totalSpentBuild);
            console.log('Running updateUnspentBuild. unspentBuild:', unspentBuild);
            unspentBuildElement.textContent = unspentBuild;
        }

        // Attach event listeners to affinity inputs for dynamic updates
        affinityInputs.forEach(input => {
            input.addEventListener('input', updateUnspentBuild);
        });

        // Update Starting Build and Unspent Build when the event changes
        if (eventDropdown) {
            eventDropdown.addEventListener('change', function () {
                const eventId = eventDropdown.value; // Get the selected event ID
                console.log('Event ID changed:', eventId); 

                if (eventId) {
                    fetch(`/characters/get_event_details/?event_id=${eventId}`)
                        .then(response => {
                            if (!response.ok) {
                                throw new Error(`HTTP error! Status: ${response.status}`);
                            }
                            return response.json();
                        })
                        .then(data => {
                            startingBuild = data.starting_points || 0;
                            startingBuildElement.textContent = startingBuild
                            cultivatorTierElement.textContent = data.cultivator_tier || "N/A";

                            // Recalculate the unspent build
                            console.log('Starting Build updated to:', startingBuild); // Debugging
                            updateUnspentBuild();
                        })
                        .catch(error => {
                            console.error('Error fetching starting_character_points:', error);
                            startingBuild = 0;
                            startingBuildElement.textContent = '0';
                            unspentBuildElement.value = '0';
                            cultivatorTierElement.value = "N/A";
                        });
                } else {
                    // Reset to 0 if no event is selected
                    startingBuild = 0;
                    startingBuildElement.textContent = '0';
                    unspentBuildElement.value = '0';
                    cultivatorTierElement.value = "N/A";
                }
            });
        }
        // Function to fetch and display common skills
        function loadCommonSkills() {
    fetch('/characters/get_common_skills/', {
        headers: {
            'X-Requested-With': 'XMLHttpRequest' // Add this header
        }
    })
    .then(response => {
        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }
        return response.json();
    })
    .then(data => {
        const skills = data.common_skills;

        // Clear existing content
        commonSkillsList.innerHTML = '';

        if (skills.length === 0) {
            commonSkillsList.innerHTML = '<p>No common skills available.</p>';
            return;
        }

        // Create a list of skills
        const skillList = document.createElement('ul');
        skillList.classList.add('list-group');

        skills.forEach(skill => {
            const skillItem = document.createElement('li');
            skillItem.classList.add('list-group-item', 'd-flex', 'justify-content-between', 'align-items-start');

            skillItem.innerHTML = `
                <div>
                    <div class="fw-bold">${skill.name}</div>
                    <small>${skill.description}</small><br>
                    <small><strong>Frequency:</strong> ${skill.frequency}</small><br>
                    <small><strong>Duration:</strong> ${skill.duration}</small>
                </div>
                <button class="btn btn-primary btn-sm" data-skill-id="${skill.id}">
                    Select Skill
                </button>
            `;

            // Add click event to "Select Skill" button
            skillItem.querySelector('button').addEventListener('click', function () {
                addCommonSkill(skill);
            });

            skillList.appendChild(skillItem);
        });

        commonSkillsList.appendChild(skillList);
    })
    .catch(error => {
        console.error('Error fetching common skills:', error);
        commonSkillsList.innerHTML = '<p>Error loading common skills. Please try again later.</p>';
    });
}

        // Function to add a common skill to the character
        function addCommonSkill(skill) {
            console.log('Adding skill:', skill);
            // Example: Add the selected skill to the Passive & At Will Skills section
            const passiveSkillsSection = document.querySelector('#passive_skills_placeholder');

            if (passiveSkillsSection) {
                const skillElement = document.createElement('div');
                skillElement.classList.add('mb-2');
                skillElement.textContent = `${skill.name} - ${skill.description}`;
                passiveSkillsSection.appendChild(skillElement);
            }

            // Close the modal
            const modal = document.querySelector('#addCommonSkillModal');
            const bootstrapModal = bootstrap.Modal.getInstance(modal);
            bootstrapModal.hide();
        }

        // Load common skills when the modal is shown
        const commonSkillModal = document.querySelector('#addCommonSkillModal');
        commonSkillModal.addEventListener('show.bs.modal', loadCommonSkills);

        // Function to fetch race skills
        function loadRaceSkills(raceId) {
            fetch(`/characters/get_race_skills/?race_id=${raceId}`, {
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                const skills = data.race_skills;

                // Clear existing content
                raceSkillsList.innerHTML = '';

                if (skills.length === 0) {
                    raceSkillsList.innerHTML = '<p>No skills available for the selected race.</p>';
                    return;
                }

                // Create a list of skills
                const skillList = document.createElement('ul');
                skillList.classList.add('list-group');

                skills.forEach(skill => {
                    const skillItem = document.createElement('li');
                    skillItem.classList.add('list-group-item', 'd-flex', 'justify-content-between', 'align-items-start');

                    skillItem.innerHTML = `
                        <div>
                            <div class="fw-bold">${skill.name}</div>
                            <small>${skill.description}</small><br>
                            <small><strong>Build:</strong> ${skill.build}</small><br>
                            <small><strong>Frequency:</strong> ${skill.frequency}</small><br>
                            <small><strong>Duration:</strong> ${skill.duration}</small>
                        </div>
                        <button class="btn btn-primary btn-sm" data-skill-id="${skill.id}">
                            Select Skill
                        </button>
                    `;

                    // Add click event to "Select Skill" button
                    skillItem.querySelector('button').addEventListener('click', function () {
                        addRaceSkill(skill);
                    });

                    skillList.appendChild(skillItem);
                });

                raceSkillsList.appendChild(skillList);
            })
            .catch(error => {
                console.error('Error fetching race skills:', error);
                raceSkillsList.innerHTML = '<p>Error loading race skills. Please try again later.</p>';
            });
        }

        // Function to add a race skill to the character
        function addRaceSkill(skill) {
            // Determine the correct section based on the skill's frequency
            let targetSectionId;

            switch (skill.frequency) {
                case "Passive & At Will":
                    targetSectionId = "#passive_skills_placeholder";
                    break;
                case "Per Encounter":
                    targetSectionId = "#per_encounter_placeholder";
                    break;
                case "Per Bell":
                    targetSectionId = "#per_bell_placeholder";
                    break;
                case "Per Day":
                    targetSectionId = "#per_day_placeholder";
                    break;
                case "Per Weekend":
                    targetSectionId = "#per_weekend_placeholder";
                    break;
                default:
                    console.error(`Unknown frequency: ${skill.frequency}`);
                    return; // Exit if the frequency is unknown
            }

            // Find the target section
            const targetSection = document.querySelector(targetSectionId);

            if (targetSection) {
                // Add the skill to the target section
                const skillElement = document.createElement('div');
                skillElement.classList.add('mb-2');
                skillElement.textContent = `${skill.name} - ${skill.description}`;
                targetSection.appendChild(skillElement);
            } else {
                console.error(`Could not find target section for frequency: ${skill.frequency}`);
            }

            // Close the modal
            const modal = document.querySelector('#addRaceSkillModal');
            const bootstrapModal = bootstrap.Modal.getInstance(modal);
            bootstrapModal.hide();
        }

        // Load race skills when the modal is shown
        raceSkillModal.addEventListener('show.bs.modal', function () {
            const raceId = raceDropdown.value;

            if (!raceId) {
                raceSkillsList.innerHTML = '<p>No race selected. Please select a race to see available skills.</p>';
            } else {
                loadRaceSkills(raceId);
            }
        });
    });
</script>
{% endblock %}
